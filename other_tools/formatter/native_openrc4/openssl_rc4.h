char* prefix = "/*\n"
" * Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved.\n"
" *\n"
" * Licensed under the OpenSSL license (the \"License\").  You may not use\n"
" * this file except in compliance with the License.  You can obtain a copy\n"
" * in the file LICENSE in the source distribution or at\n"
" * https://www.openssl.org/source/license.html\n"
" */\n"
"#include <string.h>\n"
"#include <stdlib.h>\n"
"#include <stdio.h>\n"
"#include <unistd.h>\n"
"#include <linux/perf_event.h>\n"
"#include <linux/hw_breakpoint.h>\n"
"#include <sys/ioctl.h>\n"
"#include <asm/unistd.h>\n"
"#include <openssl/rc4.h>\n"
"//#include <stdlib.h>\n"
"//#include \"rc4_locl.h\" - start\n"
"/*\n"
" * Copyright 1998-2016 The OpenSSL Project Authors. All Rights Reserved.\n"
" *\n"
" * Licensed under the OpenSSL license (the \"License\").  You may not use\n"
" * this file except in compliance with the License.  You can obtain a copy\n"
" * in the file LICENSE in the source distribution or at\n"
" * https://www.openssl.org/source/license.html\n"
" */\n"
"\n"
"#ifndef HEADER_RC4_LOCL_H\n"
"# define HEADER_RC4_LOCL_H\n"
"\n"
"# include <openssl/opensslconf.h>\n"
"// # include <internal/cryptlib.h>\n"
"\n"
"#endif\n"
"//#include \"rc4_locl.h\" - end\n"
"\n"
"/*-\n"
" * RC4 as implemented from a posting from\n"
" * Newsgroups: sci.crypt\n"
" * From: sterndark@netcom.com (David Sterndark)\n"
" * Subject: RC4 Algorithm revealed.\n"
" * Message-ID: <sternCvKL4B.Hyy@netcom.com>\n"
" * Date: Wed, 14 Sep 1994 06:35:31 GMT\n"
" */\n"
"\n"
"static unsigned char data[7][30] = {\n"
"    {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xff},\n"
"    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},\n"
"    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},\n"
"    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n"
"     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n"
"     0x00, 0x00, 0x00, 0x00, 0xff},\n"
"    {0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0,\n"
"     0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0,\n"
"     0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0,\n"
"     0x12, 0x34, 0x56, 0x78, 0xff},\n"
"    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},\n"
"    {0},\n"
"};\n"
"\n"
"void RC4(RC4_KEY *key, size_t len, const unsigned char *indata,\n"
"         unsigned char *outdata)\n"
"{\n"
"    register RC4_INT *d;\n"
"    register RC4_INT x, y, tx, ty;\n"
"    size_t i;\n"
"\n"
"    x = key->x;\n"
"    y = key->y;\n"
"    d = key->data;\n"
"\n"
"#define LOOP(in,out) \\n"
"                x=((x+1)&0xff); \\n"
"                tx=d[x]; \\n"
"                y=(tx+y)&0xff; \\n"
"                d[x]=ty=d[y]; \\n"
"                d[y]=tx; \\n"
"                (out) = d[(tx+ty)&0xff]^ (in);\n"
"\n"
"    i = len >> 3;\n"
"    if (i) {\n"
"        for (;;) {\n"
"            LOOP(indata[0], outdata[0]);\n"
"            LOOP(indata[1], outdata[1]);\n"
"            LOOP(indata[2], outdata[2]);\n"
"            LOOP(indata[3], outdata[3]);\n"
"            LOOP(indata[4], outdata[4]);\n"
"            LOOP(indata[5], outdata[5]);\n"
"            LOOP(indata[6], outdata[6]);\n"
"            LOOP(indata[7], outdata[7]);\n"
"            indata += 8;\n"
"            outdata += 8;\n"
"            if (--i == 0)\n"
"                break;\n"
"        }\n"
"    }\n"
"    i = len & 0x07;\n"
"    if (i) {\n"
"        for (;;) {\n"
"            LOOP(indata[0], outdata[0]);\n"
"            if (--i == 0)\n"
"                break;\n"
"            LOOP(indata[1], outdata[1]);\n"
"            if (--i == 0)\n"
"                break;\n"
"            LOOP(indata[2], outdata[2]);\n"
"            if (--i == 0)\n"
"                break;\n"
"            LOOP(indata[3], outdata[3]);\n"
"            if (--i == 0)\n"
"                break;\n"
"            LOOP(indata[4], outdata[4]);\n"
"            if (--i == 0)\n"
"                break;\n"
"            LOOP(indata[5], outdata[5]);\n"
"            if (--i == 0)\n"
"                break;\n"
"            LOOP(indata[6], outdata[6]);\n"
"            if (--i == 0)\n"
"                break;\n"
"        }\n"
"    }\n"
"    key->x = x;\n"
"    key->y = y;\n"
"}\n"
"\n"
"/* sudiptac: copied functionality from the respective file */\n"
"void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)\n"
"{\n"
"    register RC4_INT tmp;\n"
"    register int id1, id2;\n"
"    register RC4_INT *d;\n"
"    unsigned int i,j;\n"
"\n"
"		//printf(\"RC4: %d\\nn\", sizeof(RC4_INT));\n"
"\n"
"    d = &(key->data[0]);\n"
"    key->x = 0;\n"
"    key->y = 0;\n"
"    id1 = id2 = 0;\n"
"\n"
"#define SK_LOOP(d,n) { \\n"
"                tmp=d[(n)]; \\n"
"                id2 = (data[id1] + tmp + id2) & 0xff; \\n"
"                if (++id1 == len) id1=0; \\n"
"                d[(n)]=d[id2]; \\n"
"                d[id2]=tmp; }\n"
"\n"
"    for (i = 0; i < 256; i++)\n"
"        d[i] = i;\n"
"\n"
"		for (i = 0; i < 16; i += 4) {\n"
"    	SK_LOOP(d, i + 0);\n"
"   		SK_LOOP(d, i + 1);\n"
"    	SK_LOOP(d, i + 2);\n"
"    	SK_LOOP(d, i + 3);\n"
"		}\n"
"\n"
"    for (j = i; j < 256; j += 4) {\n"
"        SK_LOOP(d, j + 0);\n"
"        SK_LOOP(d, j + 1);\n"
"        SK_LOOP(d, j + 2);\n"
"        SK_LOOP(d, j + 3);\n"
"    }\n"
"\n"
"}\n"
"\n"
"/* sudiptac: main function for testing RC4 */\n"
"int main()\n"
"{\n"
"    int j;\n"
"    unsigned char *p;\n"
"    RC4_KEY key;\n"
"    unsigned char keys[10] = {";

char* suffix = "};\n"
"    unsigned char obuf[512] = {0};\n"
"\n"
"    long a_fd, m_fd;\n"
"    long long accesses, misses;\n"
"\n"
"\n"
"    /*initializing and starting perf*/\n"
"    struct perf_event_attr pe;\n"
"    memset(&pe, 0, sizeof(struct perf_event_attr));\n"
"\n"
"    /*group*/\n"
"    pe.type = PERF_TYPE_HW_CACHE;\n"
"    pe.size = sizeof(struct perf_event_attr);\n"
"    pe.config = PERF_COUNT_HW_CACHE_L1D | (PERF_COUNT_HW_CACHE_OP_READ << 8) | (PERF_COUNT_HW_CACHE_RESULT_ACCESS << 16);\n"
"    pe.disabled = 1;\n"
"    pe.exclude_kernel = 1;\n"
"    pe.exclude_hv = 1;\n"
"    a_fd = syscall(__NR_perf_event_open, &pe, 0, -1, -1, 0);\n"
"    if (a_fd < 0)\n"
"        return -1;\n"
"    \n"
"    /*child*/\n"
"    pe.disabled = 0;\n"
"    pe.config = PERF_COUNT_HW_CACHE_L1D | (PERF_COUNT_HW_CACHE_OP_READ << 8) | (PERF_COUNT_HW_CACHE_RESULT_MISS << 16);\n"
"    m_fd = syscall(__NR_perf_event_open, &pe, 0, -1, a_fd, 0);\n"
"\n"
"    /*enable and start perf*/\n"
"    ioctl(a_fd, PERF_EVENT_IOC_RESET, 0);\n"
"    ioctl(a_fd, PERF_EVENT_IOC_ENABLE, 0);\n"
"\n"
"    /*start of section - activity to measure*/    \n"
"    RC4_set_key(&key, 8, &(keys[1]));\n"
"    RC4(&key, 8, &(data[0][0]), obuf);\n"
"    /*end of section - activity to measure*/\n"
"\n"
"    /*stopping perf*/\n"
"    ioctl(m_fd, PERF_EVENT_IOC_DISABLE, 0);\n"
"    \n"
"    /*reading outputs and printing them*/\n"
"    read(m_fd, &misses, sizeof(long long));\n"
"    read(a_fd, &accesses, sizeof(long long));\n"
"    printf(\"%lld\\n\", accesses);\n"
"    printf(\"%lld\\n\", misses);\n"
"\n"
"    /*cleanup and exit*/\n"
"    close(m_fd);\n"
"    close(a_fd);\n"
"    return 0;\n"
"}";
