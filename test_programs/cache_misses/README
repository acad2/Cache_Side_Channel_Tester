Here is the source to make executables which compile the benchmarks with the given input, and execute the compiled binary on the native system and report the L1 cache misses. Internally, it runs a program MAX_EXECS times, sorts the outputs and finally reports the median of the sorted outputs.

The value of MAX_EXECS needs to be set from the terminal. For example:
```
$ export MAX_EXECS=1000
```

One can also specify which CPU core to execute the target on, in case the CPU has multiple cores. The CPU core can be specified from the terminal. For example:
```
$ export CPU_NO=0
```
On setting the CPU_NO value to -1, or not setting it at all, the target is executed is executed on all CPU cores.

The benchmarks provided here are:
	1. Basic AES (basic_aes)
	2. gdklib (key name) (gdklib_name)
	3. gdklib (key unicode) (gdklib_uni)
	4. OpenSSL AES (openssl_aes)
	5. OpenSSL DES (openssl_des)
	6. OpenSSL RC4 (openssl_rc4)

These benchmarks "exist" in this project's environment in the form of prefixes and suffixes specified in their corresponding header files.

To build, run
```
make clean all
```

Every executable requires a certain number of input parameters as specified in its benchmark's header.

###Example
```
$ ./basic_aes 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8
$ ./openssl_des 1 2 3 4 5 6 7 8
```